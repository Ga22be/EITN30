/*!**************************************************************************
*! FILE NAME  : Job.ihh
*!                                                            
*! DESCRIPTION: The internal interface to 
*!              
*!**************************************************************************/

#ifndef Job_ihh
#define Job_ihh

#include "job.hh"

#include "threads.hh"
#include "queue.hh"

//*#**************************************************************************
//*# CLASS NAME       : JobQueue
//*# BASE CLASSES     : none
//*#                    
//*# DESCRIPTION      : Singleton class holding the Jobs that are ready
//*#                    to execute
//*# RESPONSIBILITIES : hold Jobs that are ready to execute
//*#                    
//*#---------------------------------------------------------------------------
//*# HISTORY                                                    
//*#                                                            
//*# DATE         NAME            CHANGES                       
//*# ----         ----            -------                       
//*# May 26 1995  Stefan S        Initial version
//*#**************************************************************************/

class JobQueue
{
 public:
  // Public interface:
  
  static JobQueue* instance();

  static void      initialise(unsigned int theSoftLimit);

  ~JobQueue();

  void add(Job*);
  // add Job to end of queue.
  // When add is called, the JobQueue owns the Job (and is responsible for
  // deletion).
  // raises: Error::outOfSpace (when soft limit is reached)
  
  Job* first();
  // returns first job in queue. Waits until there is a Job if the queue is
  // empty.

 protected:
  JobQueue();
  enum { defaultSoftLimit = 10 };
  
  void softLimit(unsigned int theSoftLimit);

  bool softLimitExceeded() const;
  PQueue<Job*> myQueue;
  Semaphore*                          myJobsToExecute;
  unsigned int                        mySoftLimit;

  static JobQueue*                    myInstance;
};


//*#**************************************************************************
//*# CLASS NAME       : JobThread
//*# BASE CLASSES     : Thread
//*#                    
//*# DESCRIPTION      : Thread that execute a Job from the Job Queue when
//*#                    there are ready Jobs
//*# RESPONSIBILITIES : 
//*#                    
//*#---------------------------------------------------------------------------
//*# HISTORY                                                    
//*#                                                            
//*# DATE         NAME            CHANGES                       
//*# ----         ----            -------                       
//*# May 26 1995  Stefan S        Initial version
//*#**************************************************************************/

class JobThread : public Thread
{
 public:
  JobThread(int theStackSize, int theNumber);

 private:
  void proc();
  int  myNumber;
};

#endif
