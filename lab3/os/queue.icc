#include "queue.hh"

template<class Type>
PQueue<Type>::PQueue()
{
  myLength = 0;
  first = 0;
  last = 0;
}

template<class Type>
PQueue<Type>::~PQueue()
{
}


template<class Type>
bool PQueue<Type>::IsEmpty()
{
  return (first == 0);
}

template<class Type>
uword PQueue<Type>::Length() const
{
  return myLength;
}

template<class Type>
void PQueue<Type>::Append(const Type& a)
{
  myLength++;
  PQueueItem<Type>* anItem = new PQueueItem<Type>(a);
  if(last)
  {
	last->next = anItem;
	last = anItem;
  }
  else
  {
	first = anItem;
	last = anItem;
  }
}

template<class Type>
void PQueue<Type>::Prepend(const Type& a)
{
  myLength++;
  PQueueItem<Type>* anItem = new PQueueItem<Type>(a);
  anItem->next = first;
  first = anItem;
}

template<class Type>
Type& PQueue<Type>::Front()
{
  return first->getItem();
}

template<class Type>
void PQueue<Type>::Pop()
{
  if(first)
  {
	PQueueItem<Type>* anItem = first;
	first = first->next;
	delete anItem;
    myLength--;
  }
  if(first == 0)
  {
	last = 0;
  }
}

template<class Type>
void PQueue<Type>::Remove(const Type& a)
{
  PQueueItem<Type>* anItem = first;
  if (a == first->getItem())
  {
    first = first->next;
    myLength--;
    delete anItem;
    if(first == 0)
    {
	  last = 0;
    }
    return;
  }
  PQueueItem<Type>* anItem2 = first->next;
  while (anItem2 != NULL)
  {
    if (a == anItem2->getItem())
    {
      anItem->next = anItem2->next;
      myLength--;
      delete anItem2;
      if (anItem2 == last)
      {
        last = anItem;
      }
      return;
    }
    anItem = anItem2;
    anItem2 = anItem2->next;
  }
}

template<class Type>
void PQueue<Type>::ResetIterator()
{
  iter = first;
}

template<class Type>
Type& PQueue<Type>::Next()
{
  if (!iter)
  {
    cout << "FATAL ERROR IN PQueue::Next()" << endl;
  }
  Type& anItem = iter->getItem();
  iter = iter->next;
  return anItem;
}

template<class Type>
PQueueItem<Type>::PQueueItem(const Type a)
{
  next = 0;
  myItem = a;
}

template<class Type>
PQueueItem<Type>::~PQueueItem()
{
}

template<class Type>
Type& PQueueItem<Type>::getItem()
{
  return myItem;
}
